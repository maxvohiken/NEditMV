                              NEdit Version 4.0.3

NEdit is a GUI style plain text editor for workstations with X Windows and
Motif.  It is widely considered to be among the best GUI based editors
available for Unix systems.

Pre-built executables are available for most major Unix and VMS systems, so
check ftp.fnal.gov in the /pub/nedit directory, and the contributed software
directory, /pub/nedit/v4_0/contrib, first.


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.


NEdit Configure Options
=======================

Configure understands the following NEdit specific arguments.

`--with-motif=[DIR | INCLUDEDIR:LIBRARYDIR]'
     This option is used to tell configure where the Motif include
     and library files are located on your system. If DIR is given
     then the include files are assumed to be located in DIR/include
     and the library files are assumed to be located in DIR/lib.
     If INCLUDEDIR:LIBRARYDIR is supplied then the include files are
     assumed to be located in INCLUDEDIR and the libraries are assumed
     to be located in LIBRARYDIR.

`--enable-purify'
     Enable building with Purify.

`--enable-sgi-custom'
     Enables the X stuff specific to SGI's like short menus.

`--enable-right-button-menu'
     Enables the right mouse button popup menu.

NEdit Directories

The two directories called source and util contain the sources for NEdit.  Util
should be built first, followed by source. 

The Source Directories

Since executables are already available for the supported systems, you are
probably not just rebuilding an existing configuration, and need to know more
about how the directories are organized.

The util directory builds a library file called libNUtil.a, which is later
linked with the code in the source directory to create the nedit executable.


Building NEdit on VMS Systems

Command files are provided for compiling and linking files in the source
and util directories.  comutil.com compiles the files in the util directory
and produces two library files, vmsutils.olb and libutil.olb.  comnedit.com
compiles and links the files in the source directory to produce the nedit.exe
executable.


Installation

NEdit consists of a single, stand-alone executable file which does not require
any special installation.  To install NEdit on Unix systems, simply put the
nedit executable in your path.  On VMS systems, nedit must be defined as a
foreign command so that it can process command line arguments.  For example,
if nedit.exe were in the directory mydir on the disk called mydev, adding the
following line to your login.com file would define the nedit command:

	$ ned*it :== $mydev:[mydir]nedit.exe

To use NEdit in client/server mode, you also need the nedit client program, nc,
which, again, needs no special installation, except in the VMS case, as above.


Running NEdit

If you are accessing a host Unix system from a remote workstation or X terminal,
you need to set the Unix environment variable for your display:

	% setenv DISPLAY devicename:0
	
where devicename is the network node name of the workstation or X terminal
where you are typing.  On VMS systems, the equivalent command is:

	$ set display/create/node=devicename

To run NEdit, simply type "nedit", optionally followed by the name of a file or
files to edit.  On-line help is available from the pulldown menu on the far
right of the menu bar.  For more information on the syntax of the nedit command
line, look under the heading of "NEdit Command Line."


Problems, Questions, or Comments:

If you have problems, questions, or comments, send mail to:
nedit_support@fnal.gov.

Before reporting a problem, please check the Problems/Bugs section of the
on-line help to make sure the problem is not already known.

Mark Edel
edel@fnal.gov
Fermi National Accelerator Laboratory
P.O. Box 500
Batavia, IL 60148
